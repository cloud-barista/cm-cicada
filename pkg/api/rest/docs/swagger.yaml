definitions:
  airflow.DAG:
    properties:
      dag_id:
        description: The ID of the DAG.
        type: string
      default_view:
        allOf:
        - $ref: '#/definitions/airflow.NullableString'
        description: Default view of the DAG inside the webserver  *New in version
          2.3.0*
      description:
        allOf:
        - $ref: '#/definitions/airflow.NullableString'
        description: User-provided DAG description, which can consist of several sentences
          or paragraphs that describe DAG contents.
      file_token:
        description: The key containing the encrypted path to the file. Encryption
          and decryption take place only on the server. This prevents the client from
          reading an non-DAG file. This also ensures API extensibility, because the
          format of encrypted data may change.
        type: string
      fileloc:
        description: The absolute path to the file.
        type: string
      has_import_errors:
        allOf:
        - $ref: '#/definitions/airflow.NullableBool'
        description: Whether the DAG has import errors  *New in version 2.3.0*
      has_task_concurrency_limits:
        allOf:
        - $ref: '#/definitions/airflow.NullableBool'
        description: Whether the DAG has task concurrency limits  *New in version
          2.3.0*
      is_active:
        allOf:
        - $ref: '#/definitions/airflow.NullableBool'
        description: Whether the DAG is currently seen by the scheduler(s).  *New
          in version 2.1.1*  *Changed in version 2.2.0*&#58; Field is read-only.
      is_paused:
        allOf:
        - $ref: '#/definitions/airflow.NullableBool'
        description: Whether the DAG is paused.
      is_subdag:
        description: Whether the DAG is SubDAG.
        type: boolean
      last_expired:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: Time when the DAG last received a refresh signal (e.g. the DAG's
          \"refresh\" button was clicked in the web UI)  *New in version 2.3.0*
      last_parsed_time:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: The last time the DAG was parsed.  *New in version 2.3.0*
      last_pickled:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: The last time the DAG was pickled.  *New in version 2.3.0*
      max_active_runs:
        allOf:
        - $ref: '#/definitions/airflow.NullableInt32'
        description: Maximum number of active DAG runs for the DAG  *New in version
          2.3.0*
      max_active_tasks:
        allOf:
        - $ref: '#/definitions/airflow.NullableInt32'
        description: Maximum number of active tasks that can be run on the DAG  *New
          in version 2.3.0*
      next_dagrun:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: The logical date of the next dag run.  *New in version 2.3.0*
      next_dagrun_create_after:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: Earliest time at which this ``next_dagrun`` can be created.  *New
          in version 2.3.0*
      next_dagrun_data_interval_end:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: The end of the interval of the next dag run.  *New in version
          2.3.0*
      next_dagrun_data_interval_start:
        allOf:
        - $ref: '#/definitions/airflow.NullableTime'
        description: The start of the interval of the next dag run.  *New in version
          2.3.0*
      owners:
        items:
          type: string
        type: array
      pickle_id:
        allOf:
        - $ref: '#/definitions/airflow.NullableString'
        description: Foreign key to the latest pickle_id  *New in version 2.3.0*
      root_dag_id:
        allOf:
        - $ref: '#/definitions/airflow.NullableString'
        description: If the DAG is SubDAG then it is the top level DAG identifier.
          Otherwise, null.
      schedule_interval:
        $ref: '#/definitions/airflow.NullableScheduleInterval'
      scheduler_lock:
        allOf:
        - $ref: '#/definitions/airflow.NullableBool'
        description: Whether (one of) the scheduler is scheduling this DAG at the
          moment  *New in version 2.3.0*
      tags:
        description: List of tags.
        items:
          $ref: '#/definitions/airflow.Tag'
        type: array
      timetable_description:
        allOf:
        - $ref: '#/definitions/airflow.NullableString'
        description: Timetable/Schedule Interval description.  *New in version 2.3.0*
    type: object
  airflow.DAGCollection:
    properties:
      dags:
        items:
          $ref: '#/definitions/airflow.DAG'
        type: array
      total_entries:
        description: Count of objects in the current result set.
        type: integer
    type: object
  airflow.NullableBool:
    type: object
  airflow.NullableInt32:
    type: object
  airflow.NullableScheduleInterval:
    type: object
  airflow.NullableString:
    type: object
  airflow.NullableTime:
    type: object
  airflow.Tag:
    properties:
      name:
        type: string
    type: object
  github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  github_com_cloud-barista_cm-cicada_pkg_api_rest_model.DefaultArgs:
    properties:
      email:
        type: string
      email_on_failure:
        type: boolean
      email_on_retry:
        type: boolean
      owner:
        type: string
      retries:
        description: 'default: 1'
        type: integer
      retry_delay_sec:
        description: 'default: 300'
        type: integer
      start_date:
        type: string
    type: object
  github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Task:
    properties:
      dependencies:
        items:
          type: string
        type: array
      operator:
        type: string
      operator_options:
        items:
          properties:
            name:
              type: string
            value: {}
          type: object
        type: array
      task_component:
        type: string
      task_name:
        type: string
    type: object
  github_com_cloud-barista_cm-cicada_pkg_api_rest_model.TaskGroup:
    properties:
      description:
        type: string
      task_group_name:
        type: string
      tasks:
        items:
          $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Task'
        type: array
    type: object
  github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Workflow:
    properties:
      default_args:
        $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.DefaultArgs'
      description:
        type: string
      id:
        type: string
      task_groups:
        items:
          $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.TaskGroup'
        type: array
    type: object
  pkg_api_rest_controller.SimpleMsg:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /cicada/health:
    get:
      consumes:
      - application/json
      description: Check Cicada is alive
      produces:
      - application/json
      responses:
        "200":
          description: Successfully get heath state.
          schema:
            $ref: '#/definitions/pkg_api_rest_controller.SimpleMsg'
        "500":
          description: Failed to check health.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
      summary: Check Cicada is alive
      tags:
      - '[Admin] System management'
  /workflow:
    get:
      consumes:
      - application/json
      description: Get a list of DAGs from Airflow
      produces:
      - application/json
      responses:
        "200":
          description: Successfully get a workflow list.
          schema:
            $ref: '#/definitions/airflow.DAGCollection'
        "400":
          description: Sent bad request.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
        "500":
          description: Failed to get a workflow list.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
      summary: List Workflow
      tags:
      - '[Workflow]'
    post:
      consumes:
      - application/json
      description: Create a DAG in Airflow.
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Workflow'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully create the DAG.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Workflow'
        "400":
          description: Sent bad request.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
        "500":
          description: Failed to create DAG.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
      summary: Create Workflow
      tags:
      - '[Workflow]'
  /workflow/{name}:
    get:
      consumes:
      - application/json
      description: Get a list of DAGs from Airflow
      produces:
      - application/json
      responses:
        "200":
          description: Successfully get a workflow list.
          schema:
            $ref: '#/definitions/airflow.DAGCollection'
        "400":
          description: Sent bad request.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
        "500":
          description: Failed to get a workflow list.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
      summary: List Workflow
      tags:
      - '[Workflow]'
  /workflow/run/{name}:
    post:
      consumes:
      - application/json
      description: Get the DAG in Airflow
      parameters:
      - description: Workflow ID
        in: query
        name: dag_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully run the Workflow.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_model.Workflow'
        "400":
          description: Sent bad request.
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
        "500":
          description: Failed to run Workflow
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-cicada_pkg_api_rest_common.ErrorResponse'
      summary: Run Workflow
      tags:
      - '[Workflow]'
swagger: "2.0"
